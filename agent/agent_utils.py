from typing import Any
from pydantic import BaseModel
from langchain_core.runnables import RunnableConfig
from .agent_classes import Reflections
from database.db import db


class ExtraOptions(BaseModel):
    # Can not set both of these to True
    onlyStyle: bool | None = None # True Will only include the style guidelines in the output.
    onlyFact: bool | None = None # True Will only include the general facts in the output.

def format_reflections(reflections: Reflections, extra: ExtraOptions | None = None) -> str:
    """
    Formats reflections into a string representation.
    """
    if extra is not None and extra.get('onlyStyle') and extra.get('onlyFact'):
        raise ValueError("Cannot specify both `onlyStyle` and `onlyFact` as true.")

    style_string = f"""The following is a list of style guidelines previously generated by you:
<style-guidelines>
- {chr(10).join(reflections.style_guidelines)}
</style-guidelines>"""

    fact_string = f"""The following is a list of memories/facts you previously generated about the user:
<user-facts>
- {chr(10).join(reflections.general_facts)}
</user-facts>"""

    if extra is not None and extra.get('onlyStyle'):
        return style_string
    if extra is not None and extra.get('onlyFact'):
        return fact_string

    return f"{style_string}\n\n{fact_string}"

